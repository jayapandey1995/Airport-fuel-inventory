c
all_transactions.length > 0
all_transactions
transaction[4] == count.to_s
count
c
count
q!
all_transactions.length
all_transactions
c
count
transaction[4] == count.to_s
c
transaction[4] == count.to_s
Transactions
total_data
c
all_transactions
c
transaction[4] == airport_id
airport_id
transaction[4]
c
hash_of_table = all_transactions.map { |values| %w(Date_time Type Fuel Aircraft).zip(values).to_h }
transaction[4]
Transactions
all_transactions
c
transaction
hash_of_table = transaction.map{ |values| %w(Date_time Type Fuel Aircraft).zip(values).to_h }
hash_of_table = transaction{ |values| %w(Date_time Type Fuel Aircraft).zip(values).to_h }
hash_of_table = transaction.map { |values| %w(Date_time Type Fuel Aircraft).zip}
hash_of_table = transaction.map { |values| %w(Date_time Type Fuel Aircraft)}
hash_of_table = transaction.map { |values| %w(Date_time Type Fuel Aircraft).zip(values)}
hash_of_table = transaction.map { |values| %w(Date_time Type Fuel Aircraft).zip(values)
hash_of_table = transaction.map { |values| %w(Date_time Type Fuel Aircraft).zip(values).to_h }
transaction = ["2019-10-05 17:18:09 +0530", "In", "700", nil, "1", 25766]
transaction
hash_of_table = transaction.map { |values| %w(Date_time Type Fuel Aircraft).zip(values).to_h }
c
hash_of_table = transaction.map { |values| (["Date/time" "Type" "Fuel" "Aircraft"]).zip(values).to_h }
c
transaction.map { |values| %w(Date/time Type Fuel Aircraft).zip(values).to_h }
n
transaction
puts "Airport: #{airport[1]}"
airport.include?(count.to_s)
transaction[4] == count.to_s
count.to_s
count
transaction[4]
transaction
airport
c
adding_fuel
change_fuel
n
change_fuel
fuel
airport_id
c
Transactions
c
Transactions
n
Transactions
c
hello
c
hello
c
hello
c
hello
c
hello
c
hello
c
hello
c
airport_data[1]
airport_data[3].to_i + fuel.to_i
c
airport_data[3] + fuel
fuel
airport_data[3]
airport_data[3] + fuel <= airport_data[1]
airport_data
c
user_input.chomp
user_input
